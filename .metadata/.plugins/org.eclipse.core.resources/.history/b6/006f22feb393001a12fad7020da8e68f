import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.Scene;
import java.util.Scanner;
import javafx.scene.layout.*;

import javafx.scene.image.*;
import javafx.scene.paint.*;
import javafx.stage.*;
public class Program3 {

	WritableImage wImage = new WritableImage(1000, 1000);
	PixelWriter writer = wImage.getPixelWriter();
	Color color = Color.RED;
	
	/**
	 * Bresenham's line drawing algorithm.
	 * @param x0 starting x coordinate
	 * @param y0 starting y coordinate
	 * @param x1 ending x coordinate
	 * @param y1 ending y coordinate
	 */
	public void Bres(int x0, int y0, int x1, int y1){
		int deltax; 
		int deltay; 
		int incx;
		int incy;
		int err;
		int y;//= y0; //0
		int x;//= x0; //0
		
		//if deltax will be positive
		if (x1 >= x0)
		{
			deltax = x1 - x0;
			incx = 1;
		}
		else // if negative, make it positive
		{
			deltax = x0 - x1;
			incx = -1;
		}
		// if deltay will be positive
		if (y1 >= y0)
		{
			deltay = y1 - y0;
			incy = 1;
		}
		else // make it positive
		{
			deltay = y0 - y1;
			incy = -1;
		}
		
		x = x0;
		y = y0;
		
		if (deltax >= deltay) // is slope is <= 1
		{
			deltay = deltay * 2;
			err = deltay - deltax;
			deltax = deltax * 2;
			
			while (x != x1)
			{
				writer.setColor(x, y, color);
				if (err >= 0)
				{
					y += incy;
					err -= deltax;
				}
				err += deltay;
				x += incx;
			}
			writer.setColor(x, y, color);
		}
		else // if slope greater than 1
		{
			deltax = deltax * 2;
			err = deltax - deltay;
			deltay = deltay * 2;
			
			while (y != y1)
			{
				writer.setColor(x, y, color);
				if (err >= 0)
				{
					x += incx;
					err -= deltay;
				}
				err += deltax;
				y += incy;
			}
			writer.setColor(x, y, color);
		}
		return;
		
	}
	
	public void start(Stage primaryStage) {
		System.out.println("Please input the number of lines you'd like to draw: ");
		Scanner input = new Scanner(System.in);
		int number = input.nextInt();
		
		//System.out.println("Now the x and y coordinates");
		//int x1 = input.nextInt();
		//int y1 = input.nextInt();
		
		long startTime = System.nanoTime();
		for (int i = 0; i < number; i++)
		{
			int x0 = (int)(Math.random() * 1000);
			int y0 = (int)(Math.random() * 1000);
			int x1 = (int)(Math.random() * 1000);
			int y1 = (int)(Math.random() * 1000);
			Bres(x0, y0, x1, y1);
		}
		long endTime = System.nanoTime();
		long duration = (endTime - startTime)/1000000;
		System.out.println("The time it took to draw " + number + " lines is " + duration + "milliseconds.");
		
		primaryStage.setTitle("Lines");
		
		ImageView image = new ImageView(wImage);
		Group root = new Group(image);
		Scene scene = new Scene(root, 1000, 1000);
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	public static void main(String[] args) {
		launch(args);
	}

	private static void launch(String[] args) {
		// TODO Auto-generated method stub
		
	}	
	
}
