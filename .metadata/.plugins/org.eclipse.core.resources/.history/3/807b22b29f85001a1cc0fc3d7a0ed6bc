import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.Scene;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import javafx.scene.image.*;
import javafx.scene.paint.*;

public class Program4 extends Application {

	WritableImage wImage = new WritableImage(1000, 800);//1000 1000
	PixelWriter writer = wImage.getPixelWriter();
	Color color = Color.RED;
	double Vsx = 400;//500
	double Vsy = 400;//500
	double Vcx = 400;//500
	double Vcy = 400;//500
	double s = 50;//50
	double d = 2.5;//2.5
	
	/**
	 * Bresenham's line scan conversion algorithm. 
	 * 
	 * @param x0 starting x coordinate of line
	 * @param y0 starting y coordinate of line
	 * @param x1 ending x coordinate of line
	 * @param y1 ending y coordinate of line
	 * @param color the color you'd like the line to be
	 */
	public void Bres(int x0, int y0, int x1, int y1, Color color){
		int deltax; 
		int deltay; 
		int incx;
		int incy;
		int err;
		int y;//= y0; //0
		int x;//= x0; //0
		
		//if deltax will be positive
		if (x1 >= x0)
		{
			deltax = x1 - x0;
			incx = 1;
		}
		else // if negative, make it positive
		{
			deltax = x0 - x1;
			incx = -1;
		}
		// if deltay will be positive
		if (y1 >= y0)
		{
			deltay = y1 - y0;
			incy = 1;
		}
		else // make it positive
		{
			deltay = y0 - y1;
			incy = -1;
		}
		
		x = x0;
		y = y0;
		
		if (deltax >= deltay) // is slope is <= 1
		{
			deltay = deltay * 2;
			err = deltay - deltax;
			deltax = deltax * 2;
			
			while (x != x1)
			{
				writer.setColor(x, y, color);
				
				if (err >= 0)
				{
					y += incy;
					err -= deltax;
				}
				err += deltay;
				x += incx;
			}
				//writer.setColor(x, y, color);
		}
		else // if slope greater than 1
		{
			deltax = deltax * 2;
			err = deltax - deltay;
			deltay = deltay * 2;
			
			while (y != y1)
			{
				writer.setColor(x, y, color);
					
				if (err >= 0)
				{
					x += incx;
					err -= deltay;
				}
				err += deltax;
				y += incy;
			}
					//writer.setColor(x, y, color);
		}
		return;
		
	}
	
	/**
	 * Draws the lines in datalines using Bresenham's line scan conversion
	 * algorithm.
	 * 
	 * @param datalines the list of lines
	 */
	public void DisplayPixels(int[][] datalines)
	{
		for (int i = 0; i < datalines.length; i++)
		{
			Bres(datalines[i][0], datalines[i][1], datalines[i][2], datalines[i][3], Color.RED);
		}//for
	}
	
	/**
	 * Perform basic 3d translation.
	 * 
	 *
	 */
	public double[][] BasicTranslate(double[][] datalines, int tx, int ty, int tz)
	{
		double newx0=0, newy0=0, newz0=0, newx1=0, newy1=0, newz1=0;
		double x0=0,y0=0, z0=0,x1=0,y1=0,z1=0;
		
		double[][] result = new double[datalines.length][datalines[0].length]; 
		for (int i = 0; i < datalines.length; i++)
		{
			//take the current points of the line
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
			
			//apply transformation
			newx0 = x0 + tx;
			newy0 = y0 + ty;
			newz0 = z0 + tz;
			newx1 = x1 + tx;
			newy1 = y1 + ty;
			newz1 = z1 + tz;
			
			//save new points
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newz0;
			result[i][3] = newx1;
			result[i][4] = newy1;
			result[i][5] = newz1;
			
		}//for
		
		return result;
		
	}
	
	/**
	 * Results in the transformation matrix for basic scale.
	 * 
	 * @param sx horizontal scaling factor
	 * @param sy vertical scaling factor
	 * @return a 2d int array representing a matrix
	 */
	public double[][] BasicScale(double[][] datalines, int sx, int sy, int sz)
	{
		double newx0=0, newy0=0, newz0=0, newx1=0, newy1=0, newz1=0;
		double x0=0,y0=0, z0=0,x1=0,y1=0,z1=0;
		
		double[][] result = new double[datalines.length][datalines[0].length]; 
		for (int i = 0; i < datalines.length; i++)
		{
			//take the current points in the line
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
			
			//apply scale
			newx0 = x0 * sx;
			newy0 = y0 * sy;
			newz0 = z0 * sz;
			newx1 = x1 * sx;
			newy1 = y1 * sy;
			newz1 = z1 * sz;
			
			//save new points
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newz0;
			result[i][3] = newx1;
			result[i][4] = newy1;
			result[i][5] = newz1;
			
		}//for
		
		return result;
		
	}
	
	/**
	 * Results in the transformation matrix for basic rotate.
	 * 
	 * @param angle the angle to rotate by
	 * @return a 2d array representing a matrix
	 */
	public double[][] BasicRotateX(double[][] datalines, double angle)
	{
		double radians = Math.toRadians(angle);
		double[][] result = new double[datalines.length][datalines[0].length];
		double newx0=0, newy0=0, newz0=0, newx1=0, newy1=0, newz1=0;
		double x0=0,y0=0, z0=0,x1=0,y1=0,z1=0;
		for (int i = 0; i < datalines.length; i++)
		{
			//take current points in line
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
			
			//perform x rotation
			newx0 = x0;
			newy0 = (y0 * Math.cos(angle)) + (z0 * (-1*(Math.sin(angle)))); 
			newz0 = (y0 * Math.sin(angle)) + (z0 * Math.cos(angle));
			newx1 = x1;
			newy1 = (y1 * Math.cos(angle)) + (z1 * (-1*(Math.sin(angle)))); 
			newz1 = (y1 * Math.sin(angle)) + (z1 * Math.cos(angle));
			
			//save new points
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newz0;
			result[i][3] = newx1;
			result[i][4] = newy1;
			result[i][5] = newz1;
			
		}//for
		return result;
	}
	
	public double[][] BasicRotateY(double[][] datalines, double angle)
	{
		double radians = Math.toRadians(angle);
		double[][] result = new double[datalines.length][datalines[0].length];
		double newx0=0, newy0=0, newz0=0, newx1=0, newy1=0, newz1=0;
		double x0=0,y0=0, z0=0,x1=0,y1=0,z1=0;
		for (int i = 0; i < datalines.length; i++)
		{
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
		
			newx0 = (x0 * Math.cos(radians)) + (z0 * Math.sin(radians));
			newy0 = y0;
			newz0 = (x0 * (-1*(Math.sin(radians)))) + (z0 * Math.cos(radians));
			newx1 = (x1 * Math.cos(radians)) + (z1 * Math.sin(radians));
			newy1 = y1;
			newz1 = (x1 * (-1*(Math.sin(radians)))) + (z1 * Math.cos(radians));
			
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newz0;
			result[i][3] = newx1;
			result[i][4] = newy1;
			result[i][5] = newz1;
		}
		return result;
	}
	
	public double[][] BasicRotateZ(double[][] datalines, double angle)
	{
		double radians = Math.toRadians(angle);
		double[][] result = new double[datalines.length][datalines[0].length];
		double newx0=0, newy0=0, newz0=0, newx1=0, newy1=0, newz1=0;
		double x0=0,y0=0, z0=0,x1=0,y1=0,z1=0;
		for (int i = 0; i < datalines.length; i++)
		{
			//take current points in line
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
			
			//perform z rotation
			newx0 = (x0 * Math.cos(radians)) + (y0 * (-1*(Math.sin(radians))));
			newy0 = (x0 * Math.sin(radians)) + (y0 * Math.cos(radians));
			newz0 = z0;				newx1 = (x1 * Math.cos(radians)) + (y1 * (-1*(Math.sin(radians))));
			newy1 = (x1 * Math.sin(radians)) + (y1 * Math.cos(radians));
			newz1 = z1;
			
			//save new points
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newz0;
			result[i][3] = newx1;
			result[i][4] = newy1;
			result[i][5] = newz1;
			
		}//for
		return result;
	}
	
	/**
	 * Converts a double 2d array to an integer 2d array
	 * 
	 * @param datalines the 2d double array to convert
	 * @return new 2d integer array
	 */
	public int[][] convertToInt(double[][] datalines)
	{
		int[][] intArray = new int[datalines.length][datalines[0].length]; 
		for (int i = 0; i < datalines.length; i++)
		{
			for (int j = 0; j < datalines[i].length; j++)
			{
				intArray[i][j] = (int) datalines[i][j];
			}//for
		}//for
		return intArray;
	}
	
	/**
	 * Performs perspective projection equation of a 2d array of
	 * 3d lines.
	 * 
	 * @param datalines 2d array with x y z coordinates
	 * @return new 2d array with x and y coordinates
	 */
	public double[][] perspectiveProjection(double[][] datalines)
	{
		double[][] result = new double[datalines.length][4];
		double x1=0, y1=0, z1=0, x0=0, y0=0, z0=0;
		double newx0=0, newy0=0, newx1=0, newy1=0;
		
		for (int i = 0; i < datalines.length; i++)
		{
			//take current x y z coordinates of lines
			x0 = datalines[i][0];
			y0 = datalines[i][1];
			z0 = datalines[i][2];
			x1 = datalines[i][3];
			y1 = datalines[i][4];
			z1 = datalines[i][5];
		
			//perform perspective projection equation
			newx0 = ((d * x0) / (s * z0)) * Vsx + Vcx; 
			newy0 = ((d * y0) / (s * z0)) * Vsy + Vcy; 
			newx1 = ((d * x1) / (s * z1)) * Vsx + Vcx; 
			newy1 = ((d * y1) / (s * z1)) * Vsy + Vcy;
			
			///save results to new array
			result[i][0] = newx0;
			result[i][1] = newy0;
			result[i][2] = newx1;
			result[i][3] = newy1;
			
		}//for
		return result;
	}
	
	/**
	 * @param datalines the 2d int array housing coordinates
	 * @param num the number of datalines
	 * @return int num of lines read
	 * @throws NumberFormatException
	 * @throws IOException
	 * 
	 * 
	 */
	public int InputLines(double[][] datalines, int num) throws NumberFormatException, IOException{
		 
		int row = 0;
		int column = 0;
		Scanner input = new Scanner(new File("input.txt"));
		while (input.hasNext())
		{
			datalines[row][column] = input.nextDouble();
			column++;
			if (column == 6)
			{
				column = 0;
				row++;
			}
		}
		input.close();
		return num;
	}
	/**
	 * Outputs the existing datalines into an output file output.txt.
	 */
	 public void OutputLines(double[][] datalines) throws IOException
	 {
		 BufferedWriter output;
		 FileWriter fw = new FileWriter("output.txt");
		 output = new BufferedWriter(fw);
		 String s;
		 for (int row = 0; row < datalines.length; row++)
		 {
			 if (row > 0){
			 output.newLine();
			 }
			 for (int col = 0; col < datalines[row].length; col++)
			 {
				 s = String.valueOf(datalines[row][col]);
				 output.write(s);
				 output.write(" ");
			 }
		 }
		 output.close();
	 }
	 
	@Override
	public void start(Stage primaryStage) throws IOException {

		double[][] datalines = new double[16][6];
		int num = InputLines(datalines, 16);
		int user = 0, userx = 0, usery=0, userz=0;
		String userchar;
		Double userangle;
		int Cx, Cy;
		boolean x=false,y=false,z=false;
		boolean isRunning = true;
	
		
		Scanner input = new Scanner(System.in);
		while (isRunning){
			System.out.println("What operation would you like to perform?");
			System.out.print("Select: \n"
					+ "1 to display lines\n"
					+ "2 for BasicTranslate\n"
					+ "3 for BasicScale\n"
					+ "4 for BasicRotateX 5 rotate y, 6 rotate z\n"
					+ "0 to quit\n");
			user = input.nextInt();
			switch (user){
				case 1: //displays the result to screen
					isRunning = false;
					double[][] ppArray = perspectiveProjection(datalines);
					int[][] coordinates = convertToInt(ppArray);
					DisplayPixels(coordinates);
					primaryStage.setTitle("Lines");
					ImageView image = new ImageView(wImage);
					Group root = new Group(image);
					Scene scene = new Scene(root, 800, 800);
					primaryStage.setScene(scene);
					primaryStage.show();
					break;
				case 2: //handles the basic translation process
					System.out.println("Input x tranlation: ");
					userx = input.nextInt();
					System.out.println("Input y tranlation: ");
					usery = input.nextInt();
					System.out.println("Input z tranlation: ");
					userz = input.nextInt();
					datalines = BasicTranslate(datalines, userx, usery, userz);
					OutputLines(datalines);
					System.out.println("Translate Applied");
					break;
				case 3: //handles the basic scale process
					System.out.println("Input x scale: ");
					userx = input.nextInt();
					System.out.println("Input y scale: ");
					usery = input.nextInt();
					System.out.println("Input z scale: ");
					userz = input.nextInt();
					datalines = BasicScale(datalines, userx, usery, userz);
					OutputLines(datalines);
					System.out.println("Basic Scale Applied");
				    break;
				case 4: // handles the basic rotate
					System.out.println("Input angle: ");
					userangle = input.nextDouble();
					datalines = BasicRotateX(datalines, userangle);
					OutputLines(datalines);
					System.out.println("Basic Rotate Applied");
					break;
				case 5: // handles the basic rotate
					System.out.println("Input angle: ");
					userangle = input.nextDouble();
					datalines = BasicRotateY(datalines, userangle);
					OutputLines(datalines);
					System.out.println("Basic Rotate Applied");
					break;
				case 6: // handles the basic rotate
					System.out.println("Input angle: ");
					userangle = input.nextDouble();
					datalines = BasicRotateZ(datalines, userangle);
					OutputLines(datalines);
					System.out.println("Basic Rotate Applied");
					break;
				case 9:
					isRunning = false;
					break;
				
				}
		}
		primaryStage.setTitle("Lines");
		
	}

	public static void main(String[] args) {
		launch(args);
	}
}
